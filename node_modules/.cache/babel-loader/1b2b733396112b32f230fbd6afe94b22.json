{"ast":null,"code":"import _classCallCheck from \"/home/harshita/ReactTask/ReduxTask/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/harshita/ReactTask/ReduxTask/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/harshita/ReactTask/ReduxTask/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/harshita/ReactTask/ReduxTask/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/harshita/ReactTask/ReduxTask/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/harshita/ReactTask/ReduxTask/src/components/LoginForm.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { loginUser } from '../actions/index';\nimport { connect } from \"react-redux\";\nimport { Link } from 'react-router-dom';\nimport { toastr } from 'react-redux-toastr';\n\nvar LoginForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(LoginForm, _React$Component);\n\n  function LoginForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, LoginForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(LoginForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.onSubmit = function (formValue) {\n      _this.props.loginUser(formValue, function (res) {\n        if (res.status === 200) {\n          localStorage.setItem(\"token\", res.data.token);\n          localStorage.setItem(\"user_id\", res.data.user_id); //   localStorage.setItem(\"user_display_name\", res.data.user_display_name);\n\n          _this.props.history.push('/PostList');\n\n          toastr.success('you can see all post');\n        }\n      });\n    };\n\n    _this.renderField = function (formValue) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, React.createElement(\"input\", Object.assign({\n        type: formValue.type\n      }, formValue.input, {\n        className: \"form-control is-danger\",\n        placeholder: formValue.placeholder,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      })), React.createElement(\"font\", {\n        color: \"red\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, formValue.meta.touched ? formValue.meta.error : ''));\n    };\n\n    return _this;\n  }\n\n  _createClass(LoginForm, [{\n    key: \"render\",\n    value: function render() {\n      if (!localStorage.getItem(\"token\")) {\n        return React.createElement(\"form\", {\n          className: \"ui form\",\n          onSubmit: this.props.handleSubmit(this.onSubmit),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41\n          },\n          __self: this\n        }, React.createElement(\"h2\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        }, \" LoginForm \"), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          },\n          __self: this\n        }, \"Username\"), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        }, React.createElement(Field, {\n          name: \"username\",\n          component: this.renderField,\n          type: \"text\",\n          placeholder: \"Username\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        }))), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55\n          },\n          __self: this\n        }, \"Password\"), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56\n          },\n          __self: this\n        }, React.createElement(Field, {\n          name: \"password\",\n          component: this.renderField,\n          type: \"Password\",\n          placeholder: \"Password\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57\n          },\n          __self: this\n        }))), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          type: \"submit\",\n          className: \"ui button primary\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          },\n          __self: this\n        }, \"Login\"), React.createElement(Link, {\n          to: \"/SignUp\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67\n          },\n          __self: this\n        }, \" \", React.createElement(\"button\", {\n          className: \"ui button \",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67\n          },\n          __self: this\n        }, \"Don't have an account?\"))));\n      } else {}\n    }\n  }]);\n\n  return LoginForm;\n}(React.Component);\n\nvar validate = function validate(formValue) {\n  var errors = {};\n\n  if (!formValue.username) {\n    errors.username = 'you must enter an UserName';\n  } else if (formValue.username.length > 20) {\n    errors.username = \"you must enter less than 20 letters\";\n  }\n\n  if (!formValue.password) {\n    errors.password = 'you must enter PassWord';\n  }\n\n  return errors;\n};\n\nexport default connect(null, {\n  loginUser: loginUser\n})(reduxForm({\n  form: 'LoginForm',\n  validate: validate\n})(LoginForm));","map":{"version":3,"sources":["/home/harshita/ReactTask/ReduxTask/src/components/LoginForm.js"],"names":["React","Field","reduxForm","loginUser","connect","Link","toastr","LoginForm","onSubmit","formValue","props","res","status","localStorage","setItem","data","token","user_id","history","push","success","renderField","type","input","placeholder","meta","touched","error","getItem","handleSubmit","Component","validate","errors","username","length","password","form"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Field,reduxForm} from 'redux-form';\nimport {loginUser} from '../actions/index';\nimport { connect } from \"react-redux\";\nimport {Link} from 'react-router-dom';\nimport {toastr} from 'react-redux-toastr'\n\n\nclass LoginForm extends React.Component {\n   \n    onSubmit=(formValue)=>{\n      this.props.loginUser(formValue,(res)=>{\n          if(res.status === 200){\n          localStorage.setItem(\"token\", res.data.token);\n          localStorage.setItem(\"user_id\", res.data.user_id);\n        //   localStorage.setItem(\"user_display_name\", res.data.user_display_name);\n          this.props.history.push('/PostList')  \n          toastr.success('you can see all post')\n          }\n      });\n }\n\n\n \n    renderField = (formValue) => {\n        return (\n        <div>\n            <input type={formValue.type}\n            {...formValue.input} \n            className='form-control is-danger' \n            placeholder={formValue.placeholder} />\n           <font color='red'>{formValue.meta.touched ? formValue.meta.error : ''}</font>\n        </div>\n        )\n     }\n\n    \n    render(){    \n        if(!localStorage.getItem(\"token\")) {\n        return(\n          <form className='ui form' onSubmit={this.props.handleSubmit(this.onSubmit)}>\n                     <h2> LoginForm </h2>\n                <div>\n                    <label>Username</label>\n                    <div>\n                    <Field\n                        name=\"username\"\n                        component={this.renderField}\n                        type=\"text\"\n                        placeholder=\"Username\"\n                    />\n                    </div>\n                </div>\n                <div>\n                    <label>Password</label>\n                    <div>\n                    <Field\n                        name=\"password\"\n                        component={this.renderField}\n                        type=\"Password\"\n                        placeholder=\"Password\"\n                    />\n                    </div>\n                </div>\n                <div>\n                    <button type=\"submit\"  className=\"ui button primary\">Login</button>\n                     <Link to=\"/SignUp\"> <button className=\"ui button \">Don't have an account?</button></Link>\n               </div>\n          </form>\n        );\n    }else{}\n}\n}\n\nconst  validate = (formValue) => {\n    const errors = {}\n    if(!formValue.username) {\n        errors.username='you must enter an UserName';\n    }else if(formValue.username.length > 20){\n        errors.username=\"you must enter less than 20 letters\"\n    }\n\n\n    if(!formValue.password) {\n        errors.password='you must enter PassWord';\n    }\n    return errors;\n}\n\n\nexport default connect(null , {loginUser}) (reduxForm({\n    form :'LoginForm',\n    validate\n }) (LoginForm));\n\n"]},"metadata":{},"sourceType":"module"}